#lang racket
(provide graph)
(define graph
  (quote
    ((changeXposBy: + xpos xpos:)
     (whenIReceive)
     (contentsOfList: setVar:to: lineCountOfList: readVariable doIfElse = ! doUntil >)
     (getParam)
     (rounded procDef rounded stringLength: readVariable computeFunction:of: doIfElse getParam changeVar:by: doUntil setVar:to: doIf & + letter:of: > = < !)
     (lookLike: readVariable costumeIndex = doUntil)
     (changeSizeBy: setSizeTo: readVariable + scale)
     (setSizeTo: readVariable scale - changeSizeBy:)
     (turnRight: + heading: heading)
     (mousePressed)
     (concatenate:with: setVar:to: readVariable doRepeat stringLength: contentsOfList:)
     (doPlaySoundAndWait readVariable playSound: wait:elapsed:from:)
     (lineCountOfList: stringLength: contentsOfList:)
     (timestamp setVar:to: doIf readVariable + * - / changeVar:by: computeFunction:of: < >)
     (setLine:ofList:to: readVariable deleteLine:ofList: insert:at:ofList:)
     (computeFunction:of: setVar:to: doIf rounded readVariable + * - / computeFunction:of: = < doUntil)
     (nextCostume + lookLike: costumeIndex)
     (not readVariable = doIfElse)
     (changeYposBy: + ypos: ypos)
     (gotoX:y: readVariable glideSecs:toX:y:elapsed:from: ypos: xpos:)
     (whenClicked whenSensorGreaterThan doForever)
     (costumeIndex getAttribute:of:)
     (whenGreenFlag doIf & readVariable whenIReceive mousePressed mouseY whenSensorGreaterThan = !)
     (goBackByLayers:)
     (heading getAttribute:of:)
     (playSound: doPlaySoundAndWait broadcast:)
     (setTempoTo: readVariable - changeTempoBy: tempo)
     (rest:elapsed:from: readVariable * tempo wait:elapsed:from: /)
     (doForever computeFunction:of: doRepeat / doUntil)
     (stopScripts computeFunction:of: stopScripts doWaitUntil wait:elapsed:from: whenIReceive doForever /)
     (doWaitUntil doUntil)
     (letter:of:)
     (scale getAttribute:of:)
     (ypos: xpos readVariable + * - ypos changeYposBy: gotoX:y:)
     (doBroadcastAndWait setVar:to: doWaitUntil readVariable whenGreenFlag broadcast: =)
     (+ setVar:to: readVariable * - changeVar:by:)
     (/ setVar:to: deleteLine:ofList: stringLength: lineCountOfList: readVariable - computeFunction:of: doIfElse rounded doRepeat = <)
     (changeVar:by: setVar:to: readVariable +)
     (wait:elapsed:from: timer timerReset * tempo rest:elapsed:from: / not < doUntil)
     (procDef)
     (tempo)
     (ypos getAttribute:of:)
     (say:)
     (think:)
     (distanceTo: computeFunction:of: xpos getAttribute:of: + * - ypos)
     (whenKeyPressed whenSensorGreaterThan doForever)
     (filterReset setGraphicEffect:to:)
     (doUntil not procDef broadcast: call doIf)
     (broadcast: setVar:to: whenGreenFlag doBroadcastAndWait)
     (startScene readVariable = doUntil backgroundIndex)
     (<)
     (timer)
     (! not doIfElse &)
     (setGraphicEffect:to:)
     (stringLength: setVar:to: readVariable + = doUntil letter:of:)
     (readVariable getAttribute:of:)
     (doAsk setVar:to: touching: deleteLine:ofList: & readVariable say: mousePressed doUntil)
     (doIf whenGreenFlag doIfElse doBroadcastAndWait doForever)
     (deleteLine:ofList:)
     (changeVolumeBy: volume setVolumeTo: + readVariable)
     (& setVar:to: readVariable doIf doIfElse not = ! doUntil)
     (getAttribute:of:)
     (* setVar:to: doIf deleteLine:ofList: stringLength: & readVariable + contentsOfList: < answer doIfElse not doRepeat = ! /)
     (call)
     (doRepeat setVar:to: readVariable = doUntil)
     (>)
     (xpos getAttribute:of:)
     (think:duration:elapsed:from: readVariable wait:elapsed:from: think:)
     (nextScene + startScene backgroundIndex)
     (forward: xpos changeXposBy: + * ypos computeFunction:of: changeYposBy: gotoX:y: heading)
     (volume getAttribute:of:)
     (mouseY doForever)
     (mouseX doForever)
     (whenSensorGreaterThan whenGreenFlag doForever)
     (gotoSpriteOrMouse: ypos: mouseY mouseX getAttribute:of: gotoX:y: xpos:)
     (insert:at:ofList:)
     (sceneName getAttribute:of:)
     (xpos: xpos changeXposBy: readVariable + * - ypos gotoX:y:)
     (backgroundIndex getAttribute:of:)
     (glideSecs:toX:y:elapsed:from:)
     (doIfElse not doIf procDef getParam)
     (pointTowards: setVar:to: xpos readVariable getAttribute:of: - ypos doIfElse =)
     (setVar:to: readVariable + * changeVar:by:)
     (% readVariable rounded doIfElse / >)
     (- setVar:to: concatenate:with: readVariable + * / changeVar:by:)
     (answer)
     (=)
     (append:toList: insert:at:ofList:)
     (timerReset)
     (comeToFront computeFunction:of: * goBackByLayers:)
     (setVolumeTo: readVariable volume - changeVolumeBy:)
     (turnLeft: heading: - heading)
     (hide setGraphicEffect:to: lookLike:)
     (heading: * turnLeft: turnRight: - heading)
     (stampCostume setVar:to: createCloneOf)
     (touching:)
     (changeTempoBy: readVariable + tempo setTempoTo:)
     (createCloneOf)
     (say:duration:elapsed:from: readVariable wait:elapsed:from: say:)
     )))
